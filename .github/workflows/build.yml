name: build

on:
  push:
    tags:
      - ghc-v[0-9]+.[0-9]+.[0-9]+
      - cabal-install-v[0-9]+.[0-9]+.[0-9]+.[0-9]+
      - iserv-proxy-v[0-9]+.[0-9]+.[0-9]+
  workflow_dispatch:
    inputs:
      release_tag:
        description: Tag to be used for github release. (What to build will be auto decided from it.)
        required: true

jobs:
  set-env-variables:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_TAG: ${{ steps.env.outputs.RELEASE_TAG }}
      PKG_NAME: ${{ steps.env.outputs.PKG_NAME }}
    steps:
      - id: env
        run: |
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            TAG="${GITHUB_REF#refs/*/}"
          else
            TAG="${{ github.event.inputs.release_tag }}"
          fi
          echo "::set-output name=PKG_NAME::${TAG/-v*/}"
          echo "::set-output name=RELEASE_TAG::${TAG}"

  build:
    needs: set-env-variables
    runs-on: ubuntu-latest
    env:
      ANDROID_HOME: "/opt/termux/android-sdk"
      NDK: "/opt/termux/android-ndk"
    strategy:
      matrix:
        target_arch: [aarch64, arm, i686, x86_64]
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1000
      - name: Build
        run: |
          mkdir ./out-dir
          touch ./out-dir/placeholder.zip
          # Process tag '%ci:no-build' that may be added as line to commit message.
          # Forces CI to cancel current build with status 'passed'.
          if grep -qiP '^\s*%ci:no-build\s*$' <(git log --format="%B" -n 1 "HEAD"); then
            echo "[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message."
            exit 0
          fi
          rm ./out-dir/placeholder.zip

          ./run-docker.sh \
              ./compile.sh ./out-dir ${{ matrix.target_arch }} ${{ needs.set-env-variables.outputs.RELEASE_TAG }}

      - name: Store files
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.set-env-variables.outputs.PKG_NAME }}-${{ matrix.target_arch }}
          path: ./scripts/out-dir/*

  create-release:
    needs:
      - set-env-variables
      - build
    runs-on: "ubuntu-latest"
    permissions:
      contents: write
    steps:
      # Must perform checkout first, since it deletes the target directory
      # before running, and would therefore delete the downloaded artifacts
      - uses: actions/checkout@v3

      - name: Get files
        uses: actions/download-artifact@v3

      - name: Create new release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.set-env-variables.outputs.RELEASE_TAG }}
          PKG_NAME: ${{ needs.set-env-variables.outputs.PKG_NAME }}
        run: |
          if gh release view "${RELEASE_TAG}"; then
            # If release exists then update it.
            echo "Updating release with '${RELEASE_TAG}'."
            gh release upload "${RELEASE_TAG}" ./${PKG_NAME}-*/*.xz --clobber
          else
            echo "Creating release with '${RELEASE_TAG}'."
            gh release create "${RELEASE_TAG}" ./${PKG_NAME}-*/*.xz
          fi
